pragma options  "--bnd-inline-amnt 3 --bnd-int-range 8 --bnd-inbits 3 --slv-lightverif --slv-simiters 50";

include "problem1.sk";

/*
harness void testCollisions() {
    int[2][3] obstacles = {{2, 3}, {4, 5}, {6, 7}};
    assert hasCollhasion(obstacles, 2, 3);
    assert !hasCollhasion(obstacles, 2, 4);
    assert hasCollhasion(obstacles, 4, 5);
    assert !hasCollhasion(obstacles, 7, 6);
}
*/

bit runAgent([int n], int[2][n] obstacles, int[2] goal) {
    int MAX_STEPS = 24;

    int myi = 0;
    int myj = 0;

    for (int i = 0; i < 24; i++) {
        control(myi, myj, obstacles, goal);
        if (myi == goal[0] && myj == goal[1]) {
            return true;
        }
    }
    return false;
}

harness void testController() {
    int[2][3] obstacles = {{1, 1}, {3, 3}, {7, 6}};
    int[2] goal = {7, 7};
    assert runAgent(obstacles, goal) == true;

    obstacles = {{3, 0}};
    goal = {5, 0};
    assert runAgent(obstacles, goal) == true;

    obstacles = {{0, 2}, {1, 5}};
    goal = {1, 6};
    assert runAgent(obstacles, goal) == true;

    obstacles = {{0, 2}, {1, 5}};
    goal = {0, 6};
    assert runAgent(obstacles, goal) == true;

    obstacles = {{2, 2}};
    goal = {6, 5};
    assert runAgent(obstacles, goal) == true;

}
