bitwise_and
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[ix])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 0), 0)
		((1, 1), 0)
	out mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 1), 1)
		((1, 0), 0)
bitwise_or
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[ix])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 0), 0)
		((1, 1), 0)
	out mapping:
		((1, 1), 1)
		((1, 0), 1)
		((0, 1), 1)
		((0, 0), 0)
bitwise_xor
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[ix])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 0), 0)
		((1, 1), 0)
	out mapping:
		((0, 1), 1)
		((1, 1), 0)
		((0, 0), 0)
		((1, 0), 1)
reverse
	aux spots: (a[ix],)
	out spots: (a[len(a)-ix-1],)
	aux mapping:
		((0,), 0)
		((1,), 0)
	out mapping:
		((0,), 0)
		((1,), 1)
copy
	aux spots: (a[ix],)
	out spots: (a[ix],)
	aux mapping:
		((0,), 0)
		((1,), 0)
		((2,), 0)
		((3,), 0)
		((4,), 0)
		((5,), 0)
		((6,), 0)
		((7,), 0)
		((8,), 0)
		((9,), 0)
	out mapping:
		((2,), 2)
		((5,), 5)
		((3,), 3)
		((6,), 6)
		((9,), 9)
		((7,), 7)
		((8,), 8)
		((4,), 4)
		((0,), 0)
		((1,), 1)
alternate_bits
	aux spots: (a[ix], b[ix], b[len(a)-1])
	out spots: (a[ix], b[ix], ix)
	aux mapping:
		((0, 0, 0), 0)
		((0, 0, 1), 0)
		((0, 1, 0), 0)
		((0, 1, 1), 0)
		((1, 0, 0), 0)
		((1, 0, 1), 0)
		((1, 1, 0), 0)
		((1, 1, 1), 0)
	out mapping:
		((1, 1, 4), 1)
		((0, 0, 3), 0)
		((1, 1, 2), 1)
		((0, 1, 1), 1)
		((1, 0, 0), 1)
		((0, 1, 3), 1)
		((0, 1, 2), 0)
		((0, 0, 1), 0)
		((1, 0, 4), 1)
		((1, 0, 3), 0)
		((1, 1, 1), 1)
		((0, 1, 0), 0)
		((0, 0, 4), 0)
		((1, 1, 3), 1)
		((1, 0, 2), 1)
		((1, 0, 1), 0)
		((0, 0, 0), 0)
		((0, 0, 2), 0)
		((1, 1, 0), 1)
		((0, 1, 4), 0)
		((0, 0, 5), 0)
		((0, 1, 5), 1)
		((1, 0, 5), 0)
		((1, 1, 5), 1)
		((0, 0, 6), 0)
		((1, 1, 6), 1)
		((1, 0, 6), 1)
		((0, 1, 6), 0)
		((0, 0, 7), 0)
		((1, 1, 7), 1)
		((0, 1, 7), 1)
		((1, 0, 7), 0)
		((0, 1, 8), 0)
		((0, 0, 8), 0)
		((1, 1, 8), 1)
		((1, 0, 8), 1)
		((0, 1, 9), 1)
		((0, 0, 9), 0)
		((1, 0, 9), 0)
		((1, 1, 9), 1)
copy_a_if_a0
	aux spots: (a[ix], b[ix], b[len(a)-1])
	out spots: (a[ix], b[ix], a[0])
	aux mapping:
		((0, 0, 0), 0)
		((0, 0, 1), 0)
		((0, 1, 0), 0)
		((0, 1, 1), 0)
		((1, 0, 0), 0)
		((1, 0, 1), 0)
		((1, 1, 0), 0)
		((1, 1, 1), 0)
	out mapping:
		((0, 1, 1), 0)
		((1, 1, 1), 1)
		((1, 0, 1), 1)
		((0, 1, 0), 1)
		((0, 0, 0), 0)
		((1, 0, 0), 0)
		((1, 1, 0), 1)
		((0, 0, 1), 0)
insert_1
	aux spots: (a[ix], b[ix])
	out spots: (ix, a[ix-1])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 0), 0)
		((1, 1), 0)
	out mapping:
		((4, 0), 0)
		((3, 1), 1)
		((2, 1), 1)
		((1, 0), 0)
		((0, 0), 1)
		((4, 1), 1)
		((2, 0), 0)
		((3, 0), 0)
		((1, 1), 1)
		((5, 0), 0)
		((5, 1), 1)
		((6, 0), 0)
		((6, 1), 1)
		((7, 1), 1)
		((7, 0), 0)
		((8, 0), 0)
		((8, 1), 1)
		((9, 0), 0)
		((9, 1), 1)
equality_at_even_indices_else_1
	aux spots: (a[ix], b[ix], b[len(a)-1])
	out spots: (a[ix], b[ix], ix)
	aux mapping:
		((0, 0, 0), 0)
		((0, 0, 1), 0)
		((0, 1, 0), 0)
		((0, 1, 1), 0)
		((1, 0, 0), 0)
		((1, 0, 1), 0)
		((1, 1, 0), 0)
		((1, 1, 1), 0)
	out mapping:
		((1, 1, 4), 1)
		((1, 0, 3), 1)
		((1, 1, 2), 1)
		((0, 1, 1), 1)
		((0, 1, 0), 0)
		((0, 1, 4), 0)
		((1, 1, 3), 1)
		((1, 1, 0), 1)
		((0, 1, 3), 1)
		((0, 0, 2), 1)
		((1, 0, 1), 1)
		((0, 0, 4), 1)
		((0, 1, 2), 0)
		((0, 0, 0), 1)
		((1, 0, 2), 0)
		((0, 0, 1), 1)
		((1, 0, 0), 0)
		((0, 0, 3), 1)
		((1, 1, 1), 1)
		((1, 0, 4), 0)
		((0, 1, 5), 1)
		((1, 0, 5), 1)
		((1, 1, 5), 1)
		((0, 0, 5), 1)
		((1, 0, 6), 0)
		((0, 1, 6), 0)
		((1, 1, 6), 1)
		((0, 0, 6), 1)
		((0, 0, 7), 1)
		((1, 1, 7), 1)
		((1, 0, 7), 1)
		((0, 1, 7), 1)
		((1, 0, 8), 0)
		((0, 0, 8), 1)
		((0, 1, 8), 0)
		((1, 1, 8), 1)
		((0, 1, 9), 1)
		((0, 0, 9), 1)
		((1, 0, 9), 1)
		((1, 1, 9), 1)
addition
	aux spots: (a[ix], b[ix], aux)
	out spots: (a[ix], b[ix], aux)
	aux mapping:
		((0, 0, 0), 0)
		((0, 0, 1), 0)
		((0, 1, 0), 0)
		((0, 1, 1), 1)
		((1, 0, 0), 0)
		((1, 0, 1), 1)
		((1, 1, 0), 1)
		((1, 1, 1), 1)
	out mapping:
		((1, 0, 0), 1)
		((0, 0, 0), 0)
		((1, 1, 0), 0)
		((0, 0, 1), 1)
		((0, 1, 0), 1)
		((1, 1, 1), 1)
		((0, 1, 1), 0)
		((1, 0, 1), 0)
all_zeros_if_b_odd_else_copy_first
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[len(a)-1])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((1, 0), 0)
		((1, 1), 0)
	out mapping:
		((1, 0), 1)
		((0, 0), 0)
		((1, 1), 0)
		((0, 1), 0)
elementwise_both_even
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[ix])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((0, 2), 0)
		((0, 3), 0)
		((0, 4), 0)
		((0, 5), 0)
		((0, 6), 0)
		((0, 7), 0)
		((0, 8), 0)
		((0, 9), 0)
		((1, 0), 0)
		((1, 1), 0)
		((1, 2), 0)
		((1, 3), 0)
		((1, 4), 0)
		((1, 5), 0)
		((1, 6), 0)
		((1, 7), 0)
		((1, 8), 0)
		((1, 9), 0)
		((2, 0), 0)
		((2, 1), 0)
		((2, 2), 0)
		((2, 3), 0)
		((2, 4), 0)
		((2, 5), 0)
		((2, 6), 0)
		((2, 7), 0)
		((2, 8), 0)
		((2, 9), 0)
		((3, 0), 0)
		((3, 1), 0)
		((3, 2), 0)
		((3, 3), 0)
		((3, 4), 0)
		((3, 5), 0)
		((3, 6), 0)
		((3, 7), 0)
		((3, 8), 0)
		((3, 9), 0)
		((4, 0), 0)
		((4, 1), 0)
		((4, 2), 0)
		((4, 3), 0)
		((4, 4), 0)
		((4, 5), 0)
		((4, 6), 0)
		((4, 7), 0)
		((4, 8), 0)
		((4, 9), 0)
		((5, 0), 0)
		((5, 1), 0)
		((5, 2), 0)
		((5, 3), 0)
		((5, 4), 0)
		((5, 5), 0)
		((5, 6), 0)
		((5, 7), 0)
		((5, 8), 0)
		((5, 9), 0)
		((6, 0), 0)
		((6, 1), 0)
		((6, 2), 0)
		((6, 3), 0)
		((6, 4), 0)
		((6, 5), 0)
		((6, 6), 0)
		((6, 7), 0)
		((6, 8), 0)
		((6, 9), 0)
		((7, 0), 0)
		((7, 1), 0)
		((7, 2), 0)
		((7, 3), 0)
		((7, 4), 0)
		((7, 5), 0)
		((7, 6), 0)
		((7, 7), 0)
		((7, 8), 0)
		((7, 9), 0)
		((8, 0), 0)
		((8, 1), 0)
		((8, 2), 0)
		((8, 3), 0)
		((8, 4), 0)
		((8, 5), 0)
		((8, 6), 0)
		((8, 7), 0)
		((8, 8), 0)
		((8, 9), 0)
		((9, 0), 0)
		((9, 1), 0)
		((9, 2), 0)
		((9, 3), 0)
		((9, 4), 0)
		((9, 5), 0)
		((9, 6), 0)
		((9, 7), 0)
		((9, 8), 0)
		((9, 9), 0)
	out mapping:
		((5, 7), 0)
		((9, 1), 0)
		((4, 9), 0)
		((7, 5), 0)
		((8, 8), 1)
		((6, 4), 1)
		((7, 6), 0)
		((2, 8), 1)
		((2, 0), 1)
		((4, 7), 0)
		((7, 9), 0)
		((3, 4), 0)
		((8, 6), 1)
		((6, 8), 1)
		((1, 9), 0)
		((5, 6), 0)
		((0, 5), 0)
		((7, 8), 0)
		((8, 3), 0)
		((0, 1), 0)
		((0, 8), 1)
		((2, 7), 0)
		((5, 3), 0)
		((0, 7), 0)
		((4, 1), 0)
		((2, 4), 1)
		((1, 3), 0)
		((3, 9), 0)
		((9, 7), 0)
		((6, 5), 0)
		((0, 2), 1)
		((0, 3), 0)
		((9, 8), 0)
		((3, 1), 0)
		((5, 5), 0)
		((4, 3), 0)
		((6, 3), 0)
		((8, 0), 1)
		((6, 2), 1)
		((2, 3), 0)
		((3, 7), 0)
		((0, 9), 0)
		((1, 7), 0)
		((4, 2), 1)
		((9, 0), 0)
		((1, 0), 0)
		((9, 5), 0)
		((3, 5), 0)
		((6, 7), 0)
		((2, 6), 1)
		((5, 1), 0)
		((7, 3), 0)
		((0, 6), 1)
		((8, 9), 0)
		((3, 3), 0)
		((1, 2), 0)
		((7, 0), 0)
		((4, 8), 1)
		((2, 2), 1)
		((7, 7), 0)
		((4, 6), 1)
		((9, 2), 0)
		((2, 1), 0)
		((9, 6), 0)
		((8, 4), 1)
		((5, 4), 0)
		((1, 8), 0)
		((2, 5), 0)
		((3, 6), 0)
		((9, 3), 0)
		((7, 1), 0)
		((1, 5), 0)
		((3, 8), 0)
		((6, 1), 0)
		((0, 0), 1)
		((8, 2), 1)
		((7, 2), 0)
		((6, 0), 1)
		((8, 5), 0)
		((3, 0), 0)
		((0, 4), 1)
		((1, 4), 0)
		((3, 2), 0)
		((5, 9), 0)
		((4, 4), 1)
		((5, 8), 0)
		((9, 9), 0)
		((6, 9), 0)
		((5, 2), 0)
		((4, 5), 0)
		((8, 7), 0)
		((1, 1), 0)
		((2, 9), 0)
		((7, 4), 0)
		((6, 6), 1)
		((9, 4), 0)
		((8, 1), 0)
		((5, 0), 0)
		((1, 6), 0)
		((4, 0), 1)
elementwise_addition
	aux spots: (a[ix], b[ix])
	out spots: (a[ix], b[ix])
	aux mapping:
		((0, 0), 0)
		((0, 1), 0)
		((0, 2), 0)
		((0, 3), 0)
		((0, 4), 0)
		((0, 5), 0)
		((0, 6), 0)
		((0, 7), 0)
		((0, 8), 0)
		((0, 9), 0)
		((1, 0), 0)
		((1, 1), 0)
		((1, 2), 0)
		((1, 3), 0)
		((1, 4), 0)
		((1, 5), 0)
		((1, 6), 0)
		((1, 7), 0)
		((1, 8), 0)
		((1, 9), 0)
		((2, 0), 0)
		((2, 1), 0)
		((2, 2), 0)
		((2, 3), 0)
		((2, 4), 0)
		((2, 5), 0)
		((2, 6), 0)
		((2, 7), 0)
		((2, 8), 0)
		((2, 9), 0)
		((3, 0), 0)
		((3, 1), 0)
		((3, 2), 0)
		((3, 3), 0)
		((3, 4), 0)
		((3, 5), 0)
		((3, 6), 0)
		((3, 7), 0)
		((3, 8), 0)
		((3, 9), 0)
		((4, 0), 0)
		((4, 1), 0)
		((4, 2), 0)
		((4, 3), 0)
		((4, 4), 0)
		((4, 5), 0)
		((4, 6), 0)
		((4, 7), 0)
		((4, 8), 0)
		((4, 9), 0)
		((5, 0), 0)
		((5, 1), 0)
		((5, 2), 0)
		((5, 3), 0)
		((5, 4), 0)
		((5, 5), 0)
		((5, 6), 0)
		((5, 7), 0)
		((5, 8), 0)
		((5, 9), 0)
		((6, 0), 0)
		((6, 1), 0)
		((6, 2), 0)
		((6, 3), 0)
		((6, 4), 0)
		((6, 5), 0)
		((6, 6), 0)
		((6, 7), 0)
		((6, 8), 0)
		((6, 9), 0)
		((7, 0), 0)
		((7, 1), 0)
		((7, 2), 0)
		((7, 3), 0)
		((7, 4), 0)
		((7, 5), 0)
		((7, 6), 0)
		((7, 7), 0)
		((7, 8), 0)
		((7, 9), 0)
		((8, 0), 0)
		((8, 1), 0)
		((8, 2), 0)
		((8, 3), 0)
		((8, 4), 0)
		((8, 5), 0)
		((8, 6), 0)
		((8, 7), 0)
		((8, 8), 0)
		((8, 9), 0)
		((9, 0), 0)
		((9, 1), 0)
		((9, 2), 0)
		((9, 3), 0)
		((9, 4), 0)
		((9, 5), 0)
		((9, 6), 0)
		((9, 7), 0)
		((9, 8), 0)
		((9, 9), 0)
	out mapping:
		((4, 0), 4)
		((7, 5), 2)
		((3, 0), 3)
		((0, 2), 2)
		((0, 9), 9)
		((0, 0), 0)
		((1, 9), 0)
		((8, 3), 1)
		((2, 1), 3)
		((7, 6), 3)
		((5, 6), 1)
		((7, 8), 5)
		((0, 6), 6)
		((4, 2), 6)
		((1, 2), 3)
		((8, 5), 3)
		((3, 3), 6)
		((8, 8), 6)
		((6, 9), 5)
		((6, 3), 9)
		((3, 8), 1)
		((5, 8), 3)
		((0, 3), 3)
		((6, 5), 1)
		((3, 2), 5)
		((2, 2), 4)
		((6, 7), 3)
		((0, 8), 8)
		((8, 4), 2)
		((9, 9), 8)
		((9, 3), 2)
		((5, 9), 4)
		((1, 6), 7)
		((3, 5), 8)
		((9, 2), 1)
		((4, 7), 1)
		((7, 1), 8)
		((2, 6), 8)
		((7, 9), 6)
		((4, 9), 3)
		((0, 4), 4)
		((1, 3), 4)
		((9, 6), 5)
		((2, 3), 5)
		((3, 4), 7)
		((8, 6), 4)
		((2, 8), 0)
		((5, 3), 8)
		((1, 0), 1)
		((1, 8), 9)
		((9, 4), 3)
		((4, 6), 0)
		((5, 7), 2)
		((7, 2), 9)
		((3, 1), 4)
		((9, 8), 7)
		((1, 1), 2)
		((4, 8), 2)
		((9, 7), 6)
		((5, 5), 0)
		((3, 9), 2)
		((6, 6), 2)
		((0, 7), 7)
		((7, 4), 1)
		((6, 8), 4)
		((8, 7), 5)
		((5, 4), 9)
		((2, 4), 6)
		((7, 7), 4)
		((8, 1), 9)
		((5, 2), 7)
		((5, 1), 6)
		((3, 7), 0)
		((2, 5), 7)
		((3, 6), 9)
		((1, 7), 8)
		((4, 3), 7)
		((0, 5), 5)
		((9, 1), 0)
		((2, 9), 1)
		((6, 4), 0)
		((8, 2), 0)
		((4, 5), 9)
		((1, 5), 6)
		((2, 7), 9)
		((4, 4), 8)
		((9, 0), 9)
		((7, 3), 0)
		((1, 4), 5)
		((7, 0), 7)
		((4, 1), 5)
		((9, 5), 4)
		((0, 1), 1)
		((6, 0), 6)
		((8, 9), 7)
		((2, 0), 2)
		((6, 2), 8)
		((6, 1), 7)
		((5, 0), 5)
		((8, 0), 8)
addition_with_a_twist
	aux spots: (a[ix], b[ix], a[0], aux)
	out spots: (a[ix], b[ix], aux)
	aux mapping:
		((0, 0, 0, 0), 0)
		((0, 0, 0, 1), 0)
		((0, 0, 1, 0), 0)
		((0, 0, 1, 1), 0)
		((0, 1, 0, 0), 0)
		((0, 1, 0, 1), 0)
		((0, 1, 1, 0), 0)
		((0, 1, 1, 1), 1)
		((1, 0, 0, 0), 0)
		((1, 0, 0, 1), 0)
		((1, 0, 1, 0), 0)
		((1, 0, 1, 1), 1)
		((1, 1, 0, 0), 0)
		((1, 1, 0, 1), 0)
		((1, 1, 1, 0), 1)
		((1, 1, 1, 1), 1)
	out mapping:
		((1, 1, 0), 0)
		((0, 1, 1), 0)
		((1, 0, 1), 0)
		((1, 0, 0), 1)
		((0, 0, 0), 0)
		((0, 1, 0), 1)
		((0, 0, 1), 1)
		((1, 1, 1), 1)
parity_single_bit
	aux spots: (a[ix], b[ix], aux)
	out spots: (a[ix], ix, aux)
	aux mapping:
		((0, 0, 0), 0)
		((0, 0, 1), 1)
		((0, 1, 0), 0)
		((0, 1, 1), 1)
		((1, 0, 0), 1)
		((1, 0, 1), 0)
		((1, 1, 0), 1)
		((1, 1, 1), 0)
	out mapping:
		((1, 4, 0), 0)
		((0, 3, 1), 0)
		((1, 2, 1), 0)
		((1, 1, 0), 0)
		((1, 0, 1), True)
		((0, 4, 0), 0)
		((1, 3, 0), 0)
		((0, 2, 1), 0)
		((1, 1, 1), 0)
		((0, 0, 0), True)
		((0, 3, 0), 0)
		((0, 2, 0), 0)
		((1, 2, 0), 0)
		((1, 3, 1), 0)
		((0, 1, 0), 0)
		((1, 0, 0), False)
		((0, 0, 1), False)
		((0, 1, 1), 0)
		((1, 5, 0), 0)
		((0, 4, 1), 0)
		((0, 5, 0), 0)
		((1, 4, 1), 0)
		((1, 6, 0), 0)
		((0, 5, 1), 0)
		((0, 6, 0), 0)
		((1, 5, 1), 0)
		((0, 7, 0), 0)
		((1, 7, 0), 0)
		((1, 6, 1), 0)
		((0, 6, 1), 0)
		((0, 8, 0), 0)
		((1, 8, 0), 0)
		((0, 7, 1), 0)
		((1, 7, 1), 0)
		((0, 9, 0), 0)
		((1, 9, 0), 0)
		((1, 8, 1), 0)
		((0, 8, 1), 0)
running_parity
	aux spots: (a[ix], aux)
	out spots: (a[ix], aux)
	aux mapping:
		((0, 0), 0)
		((0, 1), 1)
		((1, 0), 1)
		((1, 1), 0)
	out mapping:
		((1, 0), 1)
		((1, 1), 0)
		((0, 0), 0)
		((0, 1), 1)
successes: ['bitwise_and', 'bitwise_or', 'bitwise_xor', 'reverse', 'copy', 'alternate_bits', 'copy_a_if_a0', 'insert_1', 'equality_at_even_indices_else_1', 'addition', 'all_zeros_if_b_odd_else_copy_first', 'elementwise_both_even', 'elementwise_addition', 'addition_with_a_twist', 'parity_single_bit', 'running_parity']
failures: []
